#' }
#'
#' @import httr2
#' @import jsonlite
#' @import lubridate
#' @import dplyr
#' @importFrom glue glue
#'
#' @export
get_wiki_pageviews <- function(article,
project = "en.wikipedia",
access = c("all-access", "desktop", "mobile-app", "mobile-web"),
agent = c("all-agents", "user", "spider", "automated"),
granularity = c("daily", "monthly"),
start,
end) {
# allow only specified arguments
access <- match.arg(access)
agent <- match.arg(agent)
granularity <- match.arg(granularity)
# allow only Date types for start and end
stopifnot(is.Date(start))
stopifnot(is.Date(end))
# convert to the date format YYYYMMDD
start <- format(start, "%Y%m%d")
end <- format(end, "%Y%m%d")
# create the request
url <- glue("https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/{project}/{access}/{agent}/{article}/{granularity}/{start}/{end}")
req = request(url)
# perform the request
wiki_response <- req_perform(req)
# convert request to a tibble if response is sucessful
if (wiki_response$status_code == 200) {
wiki_response <- resp_body_json(wiki_response)$items
wiki_response <- do.call(rbind, lapply(wiki_response, as_tibble)) %>%
mutate(timestamp = ymd_h(timestamp))
} else {
cat("Error: Unable to retrieve page views data.\n")
return(NULL)
}
}
#| code-fold: true
# Define constants in the program
Wikipedia_article <- "Euler_method"
start_period <- as_date("2015-07-01")
end_period <- as_date("2023-09-30")
train_split_date <- as_date("2022-01-01")
# get the page views from the API for monthly data
wiki_page_views <- get_wiki_pageviews(Wikipedia_article,
agent = "user",
access = "all",
granularity = "monthly",
start = start_period,
end = end_period)
# get the page views from the API for daily data
wiki_page_views_daily <- get_wiki_pageviews(Wikipedia_article,
agent = "user",
access = "all",
granularity = "daily",
start = start_period,
end = end_period)
# converting to tsiblle objects
wiki_page_views <- wiki_page_views %>%
select(timestamp, views) %>%
mutate(timestamp = yearmonth(timestamp)) %>%
as_tsibble(index = timestamp)
wiki_page_views_daily <- wiki_page_views_daily %>%
select(timestamp, views) %>%
mutate(timestamp = as_date(timestamp)) %>%
as_tsibble(index = timestamp)
# Doing the train / test split
test_data <- wiki_page_views %>%
filter(as_date(timestamp) >= train_split_date)
training_data <- wiki_page_views %>%
filter(as_date(timestamp) < train_split_date)
#| warning: false
#| code-fold: true
#| code-overflow: scroll
#| code-summary: "Show code for the plot"
#| label: figDaily
#| fig-cap: "Daily page views of the Wikipedia article for the Euler Method. The daily values are in light blue and the 7 day moving average in red."
wiki_page_views_daily %>%
mutate(moving_avg = zoo::rollmean(views, 7, fill = NA)) %>%
ggplot() +
geom_line(aes(timestamp, views), color = "lightblue") +
geom_line(aes(timestamp, moving_avg), color = "red") +
theme_light() +
ylim(0, 1.1 * max(wiki_page_views_daily$views)) +
scale_x_date(breaks = breaks_width("1 year"), labels = date_format("%b %y")) +
labs(title = paste("Daily Wikipedia page views:",
stringr::str_replace(Wikipedia_article, "_", " "))) +
xlab("Date") +
ylab("Page views per day")
#| code-fold: true
#| code-summary: Code for ANOVA
#| column: margin
wiki_page_views_daily %>%
mutate(weekday = weekdays(timestamp)) %>%
select(views, weekday) %>%
aov(views ~ weekday, data = .) %>%
summary()
#| label: figMonthly
#| code-fold: true
#| code-summary: "Show code for the plot"
#| fig-cap: "Page views of the Wikipedia article for the Euler Method. The monthly values are in blue."
#| warning: false
wiki_page_views %>%
mutate(timestamp = as_date(timestamp)) %>%  # date class is required for ggplot
ggplot() +
geom_line(aes(timestamp, views), color = "blue") +
theme_light() +
ylim(0, 1.1 * max(wiki_page_views$views)) +
scale_x_date(breaks = breaks_width("2 year"), labels = date_format("%b %y")) +
scale_y_continuous(labels = label_number()) +
labs(title = paste("Monthly Wikipedia page views:",
stringr::str_replace(Wikipedia_article, "_", " "))) +
xlab("Date") +
ylab("Page views per month")
#| label: figSeason
#| fig-cap: "Seasonal plot for the page views. For each year the page views from January to December are plotted."
#| code-fold: true
#| code-summary: "Show code for the plot"
wiki_page_views %>%
gg_season(views) +
theme_light() +
labs(title = "Seasonal plot for pages views") +
ylim(0, 1.1 * max(wiki_page_views$views)) +
xlab("Month") +
ylab("number of page views")
#| label: figACF
#| fig-cap: "Autocorrelation plot of the data"
#| code-fold: true
#| code-summary: "Show code for the plot"
wiki_page_views %>%
ACF(views) %>%
autoplot() +
theme_light()
# Find \lambda using the Guerrero
lambda <- training_data %>%
features(views, features = guerrero) %>%
pull(lambda_guerrero)
# model the different ARIMA models
sarima <- training_data %>%
model(log_arima = ARIMA(log(views) ~ 1 + pdq() + PDQ()),
box_cox_arima = ARIMA(box_cox(views, lambda) ~ 1 + pdq() + PDQ()),
arima = ARIMA(views ~ 1 + pdq() + PDQ()))
# Output the different models
report(sarima)
# compute the forecast
forecasted_values <- forecast(sarima, h = "21 months")
accuracy(forecasted_values, test_data) %>% select(-c("MASE", "RMSSE")) %>% kable()
#| code-fold: true
#| code-summary: "Code for post processing the data"
# Output the model
sarima %>%
select(arima) %>%
report()
# Inspect the residuals
sarima %>%
select(arima) %>%
gg_tsresiduals()
#| code-fold: true
#| code-summary: "Show code for the plot"
#| label: "figTest"
#| fig-cap: "Forecasted values with confidence intervals in blue and true values in red"
forecasted_values %>%
filter(.model == "arima") %>%
autoplot() +
geom_line(data = wiki_page_views, mapping = aes(timestamp, views), color = "red") +
theme_light() +
labs(title = "Forecasted values vs. test data") +
ylab("page views") +
xlab("date")
#| code-fold: true
#| code-summary: "Show code for Google trends"
google_trend_euler_method <- gtrends("euler method", time = paste(as.character(start_period), as.character(end_period)))
gtrends("math")
#| code-fold: true
#| code-summary: "Show code for Google trends"
google_trend_euler_method <- gtrends("euler method", time = paste(as.character(start_period), as.character(end_period)))
#| code-fold: true
#| code-summary: "Show code for Google trends"
google_trend_euler_method <- gtrends("euler method", time = paste(as.character(start_period), as.character(end_period)))
#| code-fold: true
#| code-summary: "Show code for Google trends"
google_trend_euler_method <- gtrends("euler method", time = paste(as.character(start_period), as.character(end_period)))
#| code-fold: true
#| code-summary: "Show code for Google trends"
google_trend_euler_method <- gtrends("euler method", time = paste(as.character(start_period), as.character(end_period)))
#| code-fold: true
#| code-summary: "Show code for Google trends"
google_trend_euler_method <- gtrends("euler method", time = paste(as.character(start_period), as.character(end_period)))
google_trend_euler_method <- google_trend_euler_method$interest_over_time %>%
select(date, hits) %>%
mutate(date = yearmonth(date)) %>%
tsibble(index = date)
wiki_google_trend <- inner_join(google_trend_euler_method, wiki_page_views, by = c("date" = "timestamp"))
rho <- cor(wiki_google_trend$views, wiki_google_trend$hits)
wiki_google_trend %>%
ggplot() +
geom_line(aes(date, views / max(views), color = "Wikipedia page views")) +
geom_line(aes(date, hits / max(hits), color = "Google trends")) +
theme_light() +
theme(axis.text.y=element_blank()) +
labs(title = "Google trends and Wikipedia for the term 'Euler Method'", color = "Source") +
xlab("Month") +
ylab("Accesses")
print("Hello")
?qt
qt(0.98, 8)
library(ggplot2)
# Define the implicit function
implicit_function <- function(x, y) {
# Define your implicit function here, for example: x^2 + y^2 - 1
return(x^2 + y^2 - 1)
}
# Create a data frame with a grid of points
grid <- expand.grid(x = seq(-2, 2, by = 0.1), y = seq(-2, 2, by = 0.1))
# Evaluate the implicit function on the grid
grid$z <- with(grid, implicit_function(x, y))
# Plot the implicit function using ggplot2
ggplot(grid, aes(x, y, z = z)) +
geom_contour(aes(color = ..level..), bins = 10) +
theme_minimal() +
labs(title = "Implicit Function Plot")
library(ggplot2)
# Define the function of two variables
your_function <- function(x, y) {
# Define your function here, for example: x^2 + y^2 - 4
return(x^2 + y^2 - 4)
}
# Create a data frame with a grid of points
grid <- expand.grid(x = seq(-3, 3, by = 0.1), y = seq(-3, 3, by = 0.1))
# Evaluate the function on the grid
grid$z <- with(grid, your_function(x, y))
# Plot the zero set using ggplot2
ggplot(grid, aes(x, y, z = z)) +
geom_contour(aes(color = ..level..), bins = 10) +
theme_minimal() +
labs(title = "Zero Set of the Function in Two Variables")
df(0.01, 15, 10)
df(0.01, 10, 15)
df(0.99, 10, 15)
df(0.99, 15, 10)
pf(0.99, 15, 10)
pf(0.01, 15, 10)
pf(0.01, 10, 15)
pf(0.99, 10, 15)
pf(19, 29, 0.025)
df(19, 29, 0.025)
qf(19, 29, 0.025)
qf(0.05, 1, 1)
df(0.05, 1, 1)
?fisher.test
# Beispiel fÃ¼r m=5, n=10 und ein Signifikanzniveau von 0.05
m <- 5
n <- 10
alpha <- 0.05
# Berechne das p-Quantil
quantile <- qf(1 - alpha, m, n)
# Ergebnis ausgeben
cat("Das", 1 - alpha, "-Quantil der F-Verteilung mit", m, "und", n, "Freiheitsgraden ist:", quantile)
qf(0.09, 5, 10)
qf(0.09, 10, 5)
qf(0.95, 10, 5)
qf(0.95, 5,10)
qf(0.01, 10, 5)
qf(0.01, 15, 10)
qf(0.99, 15, 10)
install.packages("tidymodels")
qf(0.95, 19, 19)
source("~/.active-rstudio-document")
compute_timestep(0.125, 0.1, 1.0)
x <- 2^c(1,2,3,4,5)
x
?%o%
1:4 %o% 5:3
1:4 %x% 5:3
x <- c(1:9 %o% 10^(-6:-1))
x
x <- c(1:9 %o% 10^(-8:-1))
x
y <- compute_timestep(x, 1.0, 1.0)
y <- lapply(x, compute_timestep(x, 1.0, 1.0))
x <- c(1:9 %o% 10^(-8:-1))
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], 1.0, 1.0)
}
df %>%
ggplot(aes(dx, dt)) + geom_line()
df <- data.frame("dx" = x, "dt" = y)
df %>%
ggplot(aes(dx, dt)) + geom_line()
ggplot(df, aes(dx, dt)) + geom_line()
ggplot(df, aes(dx, dt)) +
geom_line() +
coord_trans(x = "log10", y = "log10")
ggplot(df, aes(dx, dt)) +
geom_line() +
coord_trans(x = "log10", y = "log10") +
scale_y_continuous(trans='log10',
breaks=trans_breaks('log10', function(x) 10^x),
labels=trans_format('log10', math_format(10^.x)))
library(scales)
ggplot(df, aes(dx, dt)) +
geom_line() +
coord_trans(x = "log10", y = "log10") +
scale_y_continuous(trans='log10',
breaks=trans_breaks('log10', function(x) 10^x),
labels=trans_format('log10', math_format(10^.x)))
ggplot(df, aes(dx, dt)) +
geom_line() +
coord_trans(x = "log10", y = "log10")
ggplot(df, aes(dx, dt)) +
geom_line() +
coord_trans(x = "log10", y = "log10") +
annotation_logticks()
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line() +
coord_trans(x = "log10", y = "log10") +
annotation_logticks()
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line() +
annotation_logticks()
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line()
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line() +
annotation_logticks() +
theme_bw()
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw()
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability")
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], 1.0, 1.0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], 1.0, 1.0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
#| label: fig-timestep
#| fig-cap: "Required time step $dt$ for numerical stability given $dx$ and $u_0 = 1$"
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
end_time <- 1.0
u0 <- 1.0
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], end_time, u0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
#| label: fig-timestep
#| fig-cap: "Required time step $dt$ for numerical stability given $dx$ and $u_0 = 1$"
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
end_time <- 1.0
u0 <- 1.0
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], end_time, u0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
#| label: fig-timestep
#| fig-cap: "Required time step $dt$ for numerical stability given $dx$ and $u_0 = 1$"
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
end_time <- 1.0
u0 <- 1.0
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], end_time, u0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
#| label: fig-timestep
#| fig-cap: "Required time step for given spatial resolution and u0 = 1.0"
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
end_time <- 1.0
u0 <- 1.0
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], end_time, u0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
#| label: fig-timestep
#| fig-cap: "Required time step for given spatial resolution and u0 = 1.0"
library(ggplot2)
compute_timestep <- function(dx, end_time, u0) {
dt <- end_time
numerical_stable <- FALSE
while(!numerical_stable) {
dt <- 0.5 * dt
numerical_stable <- (dt / dx) * abs(-2 * u0 + (1 / dx)^2) <= 2 / (3*sqrt(3))
}
return(dt)
}
x <- c(1:9 %o% 10^(-8:-1))
end_time <- 1.0
u0 <- 1.0
y <- numeric(length(x))
for (i in seq_along(x)) {
y[i] <- compute_timestep(x[i], end_time, u0)
}
df <- data.frame("dx" = x, "dt" = y)
ggplot(df, aes(log10(dx), log10(dt))) +
geom_line(color = "blue") +
annotation_logticks() +
theme_bw() +
labs(title = "Time step size required for stability of ZK-scheme")
